{"version":3,"file":"main.js","sources":["../../src/main.ts"],"sourcesContent":["const { app, BrowserWindow } = require('electron');\r\nconst path = require('path');\r\n\r\n// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite plugin.\r\ndeclare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;\r\ndeclare const MAIN_WINDOW_VITE_NAME: string;\r\n\r\nconst createWindow = (): void => {\r\n  // Create the browser window.\r\n  const mainWindow = new BrowserWindow({\r\n    height: 800,\r\n    width: 1200,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, '../preload/preload.js'),\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n    },\r\n  });\r\n\r\n  // and load the index.html of the app.\r\n  if (MAIN_WINDOW_VITE_DEV_SERVER_URL) {\r\n    console.log('Loading development URL:', MAIN_WINDOW_VITE_DEV_SERVER_URL);\r\n    mainWindow.loadURL(MAIN_WINDOW_VITE_DEV_SERVER_URL);\r\n  } else {\r\n    // In production, load from the renderer directory\r\n    const prodPath = path.join(__dirname, `../renderer/${MAIN_WINDOW_VITE_NAME}/index.html`);\r\n    console.log('Loading production file:', prodPath);\r\n    // Check if the file exists\r\n    try {\r\n      require('fs').accessSync(prodPath);\r\n      console.log('Production file exists');\r\n    } catch (err) {\r\n      console.error('Error accessing production file:', err);\r\n    }\r\n    mainWindow.loadFile(prodPath).catch((err: Error) => {\r\n      console.error('Error loading production file:', err);\r\n    });\r\n  }\r\n\r\n  // Open the DevTools in development\r\n  if (process.env.NODE_ENV === 'development') {\r\n    mainWindow.webContents.openDevTools();\r\n  }\r\n};\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on('ready', createWindow);\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on('activate', () => {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n// code. You can also put them in separate files and import them here.\r\n"],"names":[],"mappings":";AAAA,MAAM,EAAE,KAAK,kBAAkB,QAAQ,UAAU;AACjD,MAAM,OAAO,QAAQ,MAAM;AAM3B,MAAM,eAAe,MAAY;AAE/B,QAAM,aAAa,IAAI,cAAc;AAAA,IACnC,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,gBAAgB;AAAA,MACd,SAAS,KAAK,KAAK,WAAW,uBAAuB;AAAA,MACrD,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IAAA;AAAA,EACpB,CACD;AAGoC;AACnC,YAAQ,IAAI,4BAA4B,uBAA+B;AACvE,eAAW,QAAQ,uBAA+B;AAAA,EACpD;AAiBA,MAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,eAAW,YAAY,aAAA;AAAA,EACzB;AACF;AAKA,IAAI,GAAG,SAAS,YAAY;AAK5B,IAAI,GAAG,qBAAqB,MAAM;AAChC,MAAI,QAAQ,aAAa,UAAU;AACjC,QAAI,KAAA;AAAA,EACN;AACF,CAAC;AAED,IAAI,GAAG,YAAY,MAAM;AAGvB,MAAI,cAAc,gBAAgB,WAAW,GAAG;AAC9C,iBAAA;AAAA,EACF;AACF,CAAC;"}
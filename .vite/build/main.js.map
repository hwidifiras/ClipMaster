{"version":3,"file":"main.js","sources":["../../src/main.ts"],"sourcesContent":["const { app, BrowserWindow, clipboard, ipcMain } = require('electron');\r\nconst path = require('path');\r\n\r\n// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite plugin.\r\ndeclare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;\r\ndeclare const MAIN_WINDOW_VITE_NAME: string;\r\n\r\nconst createWindow = (): void => {\r\n  // Create the browser window.\r\n  const mainWindow = new BrowserWindow({\r\n    height: 800,\r\n    width: 1200,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.js'),\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n    },\r\n    show: false, // Don't show until ready\r\n  });\r\n\r\n  // Show window when ready to prevent white flash\r\n  mainWindow.once('ready-to-show', () => {\r\n    mainWindow.show();\r\n    \r\n    // Open DevTools in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      mainWindow.webContents.openDevTools();\r\n    }\r\n  });\r\n\r\n  // Store reference for clipboard monitoring\r\n  let lastClipboardContent = '';\r\n  let clipboardMonitor: NodeJS.Timeout | null = null;\r\n\r\n  // Clipboard monitoring function\r\n  const startClipboardMonitoring = () => {\r\n    clipboardMonitor = setInterval(() => {\r\n      const currentContent = clipboard.readText();\r\n      if (currentContent && currentContent !== lastClipboardContent) {\r\n        lastClipboardContent = currentContent;\r\n        // Send to renderer process\r\n        mainWindow.webContents.send('clipboard-change', currentContent);\r\n      }\r\n    }, 500); // Check every 500ms\r\n  };\r\n\r\n  // Stop monitoring when window is closed\r\n  mainWindow.on('closed', () => {\r\n    if (clipboardMonitor) {\r\n      clearInterval(clipboardMonitor);\r\n    }\r\n  });\r\n\r\n  // IPC handlers for clipboard operations\r\n  ipcMain.handle('get-clipboard', () => {\r\n    return clipboard.readText();\r\n  });\r\n\r\n  ipcMain.handle('set-clipboard', (_event: any, text: string) => {\r\n    clipboard.writeText(text);\r\n    lastClipboardContent = text; // Update to prevent self-trigger\r\n    return true;\r\n  });\r\n\r\n  ipcMain.handle('clear-clipboard-history', () => {\r\n    lastClipboardContent = '';\r\n    return true;\r\n  });\r\n\r\n  ipcMain.handle('start-clipboard-monitoring', () => {\r\n    startClipboardMonitoring();\r\n    return true;\r\n  });\r\n\r\n  ipcMain.handle('stop-clipboard-monitoring', () => {\r\n    if (clipboardMonitor) {\r\n      clearInterval(clipboardMonitor);\r\n      clipboardMonitor = null;\r\n    }\r\n    return true;\r\n  });\r\n\r\n  // and load the index.html of the app.\r\n  if (MAIN_WINDOW_VITE_DEV_SERVER_URL) {\r\n    console.log('Loading development URL:', MAIN_WINDOW_VITE_DEV_SERVER_URL);\r\n    mainWindow.loadURL(MAIN_WINDOW_VITE_DEV_SERVER_URL);\r\n  } else {\r\n    // In production, load from the renderer directory\r\n    console.log('Production mode - __dirname:', __dirname);\r\n    console.log('MAIN_WINDOW_VITE_NAME:', MAIN_WINDOW_VITE_NAME);\r\n    \r\n    // Try multiple possible paths for the renderer\r\n    const possiblePaths = [\r\n      path.join(__dirname, `../renderer/${MAIN_WINDOW_VITE_NAME}/index.html`),\r\n      path.join(__dirname, '../renderer/main_window/index.html'),\r\n      path.join(__dirname, '../renderer/index.html'),\r\n      path.join(process.resourcesPath, 'app/.vite/renderer/main_window/index.html'),\r\n      path.join(process.resourcesPath, 'app/dist/renderer/index.html')\r\n    ];\r\n    \r\n    let loadedSuccessfully = false;\r\n    for (const filePath of possiblePaths) {\r\n      try {\r\n        const fs = require('fs');\r\n        if (fs.existsSync(filePath)) {\r\n          console.log('Found renderer file at:', filePath);\r\n          mainWindow.loadFile(filePath).then(() => {\r\n            loadedSuccessfully = true;\r\n          }).catch((error: any) => {\r\n            console.log('Failed to load found file:', filePath, error);\r\n          });\r\n          break;\r\n        } else {\r\n          console.log('File does not exist:', filePath);\r\n        }\r\n      } catch (error) {\r\n        console.log('Failed to load:', filePath, error);\r\n      }\r\n    }\r\n    \r\n    if (!loadedSuccessfully) {\r\n      console.error('Could not find renderer file in any expected location');\r\n      console.log('Available files in __dirname:', require('fs').readdirSync(__dirname));\r\n      console.log('Available files in parent:', require('fs').readdirSync(path.join(__dirname, '..')));\r\n    }\r\n  }\r\n\r\n  // Add error handling for renderer process crashes\r\n  mainWindow.webContents.on('crashed', () => {\r\n    console.error('Renderer process crashed');\r\n  });\r\n\r\n  mainWindow.webContents.on('unresponsive', () => {\r\n    console.error('Renderer process became unresponsive');\r\n  });\r\n\r\n  mainWindow.webContents.on('did-fail-load', (_event: any, errorCode: number, errorDescription: string, validatedURL: string) => {\r\n    console.error('Failed to load page:', errorCode, errorDescription, validatedURL);\r\n  });\r\n};\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on('ready', createWindow);\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on('activate', () => {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n// code. You can also put them in separate files and import them here.\r\n"],"names":[],"mappings":";AAAA,MAAM,EAAE,KAAK,eAAe,WAAW,QAAA,IAAY,QAAQ,UAAU;AACrE,MAAM,OAAO,QAAQ,MAAM;AAM3B,MAAM,eAAe,MAAY;AAE/B,QAAM,aAAa,IAAI,cAAc;AAAA,IACnC,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,gBAAgB;AAAA,MACd,SAAS,KAAK,KAAK,WAAW,YAAY;AAAA,MAC1C,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IAAA;AAAA,IAEpB,MAAM;AAAA;AAAA,EAAA,CACP;AAGD,aAAW,KAAK,iBAAiB,MAAM;AACrC,eAAW,KAAA;AAGX,QAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,iBAAW,YAAY,aAAA;AAAA,IACzB;AAAA,EACF,CAAC;AAGD,MAAI,uBAAuB;AAC3B,MAAI,mBAA0C;AAG9C,QAAM,2BAA2B,MAAM;AACrC,uBAAmB,YAAY,MAAM;AACnC,YAAM,iBAAiB,UAAU,SAAA;AACjC,UAAI,kBAAkB,mBAAmB,sBAAsB;AAC7D,+BAAuB;AAEvB,mBAAW,YAAY,KAAK,oBAAoB,cAAc;AAAA,MAChE;AAAA,IACF,GAAG,GAAG;AAAA,EACR;AAGA,aAAW,GAAG,UAAU,MAAM;AAC5B,QAAI,kBAAkB;AACpB,oBAAc,gBAAgB;AAAA,IAChC;AAAA,EACF,CAAC;AAGD,UAAQ,OAAO,iBAAiB,MAAM;AACpC,WAAO,UAAU,SAAA;AAAA,EACnB,CAAC;AAED,UAAQ,OAAO,iBAAiB,CAAC,QAAa,SAAiB;AAC7D,cAAU,UAAU,IAAI;AACxB,2BAAuB;AACvB,WAAO;AAAA,EACT,CAAC;AAED,UAAQ,OAAO,2BAA2B,MAAM;AAC9C,2BAAuB;AACvB,WAAO;AAAA,EACT,CAAC;AAED,UAAQ,OAAO,8BAA8B,MAAM;AACjD,6BAAA;AACA,WAAO;AAAA,EACT,CAAC;AAED,UAAQ,OAAO,6BAA6B,MAAM;AAChD,QAAI,kBAAkB;AACpB,oBAAc,gBAAgB;AAC9B,yBAAmB;AAAA,IACrB;AACA,WAAO;AAAA,EACT,CAAC;AAGoC;AACnC,YAAQ,IAAI,4BAA4B,uBAA+B;AACvE,eAAW,QAAQ,uBAA+B;AAAA,EACpD;AA0CA,aAAW,YAAY,GAAG,WAAW,MAAM;AACzC,YAAQ,MAAM,0BAA0B;AAAA,EAC1C,CAAC;AAED,aAAW,YAAY,GAAG,gBAAgB,MAAM;AAC9C,YAAQ,MAAM,sCAAsC;AAAA,EACtD,CAAC;AAED,aAAW,YAAY,GAAG,iBAAiB,CAAC,QAAa,WAAmB,kBAA0B,iBAAyB;AAC7H,YAAQ,MAAM,wBAAwB,WAAW,kBAAkB,YAAY;AAAA,EACjF,CAAC;AACH;AAKA,IAAI,GAAG,SAAS,YAAY;AAK5B,IAAI,GAAG,qBAAqB,MAAM;AAChC,MAAI,QAAQ,aAAa,UAAU;AACjC,QAAI,KAAA;AAAA,EACN;AACF,CAAC;AAED,IAAI,GAAG,YAAY,MAAM;AAGvB,MAAI,cAAc,gBAAgB,WAAW,GAAG;AAC9C,iBAAA;AAAA,EACF;AACF,CAAC;"}